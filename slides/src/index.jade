doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Building cross-platform apps with HTML5

    link(rel='stylesheet', type='text/css', href='build/build.css')
  
    style.
      .jupiter {
        background-image: url('images/flares.gif')
      }
      .mimosa {
        background-image: url('images/mimosa.jpg')
      }
      .yeoman {
        background-image: url('images/yeoman.jpg')
      }
      .brunch {
        background-image: url('images/brunch.jpg')
      }
      .slush {
        background-image: url('images/slush.jpg')
      }
      .npm {
        background-image: url('images/npm.png')
      }
      .bower {
        background-image: url('images/bower.jpg')
      }
      .jspm {
        background-image: url('images/jspm.png')
      }
      .webcomponents {
        background-image: url('images/web-components-best-practices.jpg')
      }

      pre {
        border: 1px solid gray;
        padding: 0.5em !important;
      }



  body(class='nebula')

    article

      section(data-bespoke-backdrop='jupiter')
        h2 Building cross-platform apps with HTML5
        h3 Giorgio Natili
        h4 @giorgionatili
      section
        h2 Agenda
        br
        ul.bullet
          li App Scaffolding 
          li Dependencies Management
          li Reusable CSS
          li ECMA6
          li Web Components
          li Routing
      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 App Scaffolding
      section(data-bespoke-backdrop='yeoman')
        h2 yeoman
        h3 Kickstart tool that enforces best practices and TDD
      section
        h2 Install yeoman
        br
        ul.bullet
          li install brew
          li install <i>node</i> and <i>npm</i>
            pre.bullet
              code.language-bash.
                $ brew install node
          li install <i>yeoman</i> through <i>npm</i>
            pre.bullet
              code.language-bash.
                $ npm install yo -g
      section
        h2 Using yeoman (yo!)
        br
        ul.bullet
          li just type 
            pre
              code.language-bash.
                $ yo
          li and then
            ul.bullet
              li run a generator
              li update a generator
              li get some help
              li exit
      section
        h2 A Generator?!?
        br.bullet
        p.bullet
          img(src='images/wtf.gif')
      section
        h2 Yeoman Generators
        br.bullet
        h3.bullet Receipes for modern, modular, testable and scalable web apps
        h4.bullet Among the others: angular, webapp, h5bp, ionic, react, express, gulp-webapp, etc.
       section
        h2 Create a simple HTML5 app
        br
        h4 Explore the options <br> offered from a generator 
      section(data-bespoke-backdrop='mimosa')
        h2 Mimosa
        h3 A toolkit for modern browser development

      section
        h2 What includes
        br
        ul.bullet
          li JS Transpiler
          li CSS Pre-processors
          li HTML Micro-templaters
          li Minification
          li AMD/RequireJS Support

      section
        h2 Install Mimosa
        br.bullet
        p.bullet as a <i>npm</i> module
          pre.bullet
            code.language-bash.
              $ npm install mimosa -g
      section
        h2 Out of the box transpiler support
        br.bullet
        h3.bullet Transpiling is based on file extension: CoffeeScript compiler = .coffee, LiveScript compiler = .ls, etc.
        p.bullet <i>(The same rule applies also to CSS files)</i>

      section
        h2 Micro Templates
        br.bullet
        p.bullet Mimosa offers several HTML micro templates engines:
        ul.bullet
          li Dust
          li Embedded CoffeeScript Templates (<u>ECO</u>)
          li Embedded JavaScript Templates (<u>EJS</u>)
          li Handlebars
          li Hogan
          li Jade
          li Etc.
      section
        h2 Dependency Management
        br.bullet
        h3.bullet Mimosa works with Bower to install your dependencies where they belong.
        h3.bullet It keeps track of your Bower situation to rerun Bower installs when you need them
      section
        h2 AMD Support
        br.bullet
        h3.bullet Mimosa fully support AMD through requireJS, infact:
        ul.bullet
          li AMD Path Verification
          li Notify when AMD paths are broken or wrong
          li Handle shims, maps
          li Nested <u>requires</u> and <u>defines</u>
          li Detect circular dependencies
          li Manage common config for multiple modules
      section
        h2 Hint & Lint
        br.bullet
        h3.bullet JavaScript files are hited and CSS files are linted (configurable)

      section
        h2 Sources Mapping
        br.bullet
        h3.bullet Source mapping is fully supported, even more it's possible to add breakpoints in .coffe files and use the standard debuggin tools
  
      section
        h2 Create a Web App with Mimosa
        br.bullet
        pre.bullet
          code.language-bash.
            $ mimosa skel:new webapp hello-app-mimosa
        p.bullet
          img(src='images/mimosa-run.png' style='width:400px')

      section(data-bespoke-backdrop='brunch')
        h2 Brunch
        h3 An ultra-fast HTML5 build tool
      
      section
        h2 What it does
        br.bullet
        ul.bullet
          li Compiles scripts/stylesheets/templates
          li Lints them
          li Wraps in Common.js or AMD modules (optional)
          li Concatenates & minifies
          li Generates source maps
          li Copies and optimizes image assets
          li Watches for file changes
          li Notifies you of errors via console or notifications
          li Auto reload (plugin)

      section
        h2 It sounds like mimosa
        br
        img(src='images/mumble.gif')

      section
        h2 Few important differences
        br
        ul.bullet
          li Brunch preceeds mimosa by 5-6 months
          li as far as today Brunch seems more active on github
          li Mimosa offers seprate compile phases for server and client side code
          li Mimosa offers <i>CoffeeScript</i> breakpoints
          li Mimosa allows to override configuration through <u>profiles</u>
      
      section
        h2 What's about Grunt and Gulp?
        br.bullet
        h3.bullet <u>Grunt</u> is merely a set of tasks that would be executed one after another
        h3.bullet <u>Gulp</u> doesn't make temporary files, that's why it's a "streaming build system"
        h3.bullet <u>Brunch</u> is focused on speed

      section
        h2 Getting Started
        br.bullet
        pre.bullet
          code.language-bash.
            $ npm install -g brunch
            $ brunch new [skeleton url] [output directory]
            $ brunch watch --server

      section
        h2 A huge set of Skeletons
        br.bullet
        p.bullet Between the others: ember, jade, angular, chaplin, marionette, cordova, foundation, etc.
        p.bullet A complete list is available <a href='http://brunch.io/skeletons.html' target='_blank'>here</a>.
      section
        h2 Create an HTML5 static page with Brunch
        br.bullet
        pre.bullet
          code.language-bash.
            $ brunch new gh:dobromir-hristov/brunch-with-whey-protein
      section(data-bespoke-backdrop='slush')
        h2 Slush
        h3 The streaming scaffolding system
      section
        h2 Why is different?
        br.bullet
        h3.bullet It uses <i>Gulp</i>, it doesn't offer anything out of the box and for this reason is pretty light
        p(style='font-size:11px').bullet (<i>Highly recommended if you want to have control of every single depndence that you add to your project</i>)
      section
        h2 Slush Generators
        br.bullet
        h3.bullet A huge list that includes: phonegap, go, Electron, angular, ember, backbone, express, web components, h5bp, ng-next, browserify, bootstrap, etc.
        p.bullet An omnicomprehensive list of slush generators are available <a href='http://slushjs.github.io/generators' target='_blank'>here</a>
        p(style='font-size:11px').bullet (<i>Slush generators can be installed locally!</i>)
      section
        h2 Getting Started
        br.bullet
        h4.bullet Install as an npm module
          pre.bullet
            code.language-bash.
              $ npm install slush -g
        h4.bullet Use only the tasks you need from a generator
          pre.bullet
            code.language-bash.
              $ slush &lt;generator&gt;[:&lt;tasks&gt;] [&lt;args&gt;]
 
      section
        h2 How to decided the which is the right tool?
        br
        img(src='images/confused.gif')
      
      section
        h2 With common sense and deeply analyzing your requiremnts
        br.bullet
        ul.bullet
          li Do you have huge dependecies tree?
          li Is the team big and distributed? 
          li Is the project enterprise?
          li Are you already using tools like <i>ember-cli</i>?
          li Do you already have a test suite?
          li How much active is the project community?
          
      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Dependencies Management
      
      section(data-bespoke-backdrop='npm')
        h2 NPM
        h3 Installs, publishes and manages node programs
      
      section
        h2 Node Package Manager
        br.bullet
        ul.bullet
          li Originally designed only for server side dependencies
          li Nested dependencies (each module has its own dependencies tree)
          li Can run build scripts and register utilities to your CLI

      section
        h2 Basic Commands
        br
        ul.bullet
          li 
            code.language-bash.
              $ npm install [--save,--save-dev,--save-optional]
          li 
            code.language-bash.
              $ npm update &lt;module-name&gt;
          li 
            code.language-bash.
              $ npm prune 
          li 
            code.language-bash.
              $ npm uninstall  &lt;module-name&gt;
          li
            code.language-bash.
              $ npm shrinkwrap
      section
        h2 The package.json file
        br.bullet
        pre.bullet
          code.language-javascript.
            {
              "name": "test",
              "version": "1.0.0",
              "description": "Test project",
              "main": "index.js",
              "scripts": {
                "test": "echo \"Error: no test specified\" && exit 1"
              },
              "author": "Giorgio Natili",
              "license": "ISC"
            }
      section(data-bespoke-backdrop='bower')
        h2 Bower
        h3 A package manager for the web
      section
        h2 Bower
        br
        ul.bullet
          li A npm module
          li Used to search and install client side dependencies
          li Based upon a flat dependency tree
          li Built in order to automatically resolve version conflicts
      section
        h2 Basic Commands
        br
        ul.bullet
          li 
            code.language-bash.
              $ bower init
          li
            code.language-bash.
              $ bower install [--save,--save-dev]
          li
            code.language-bash.
              $ bower cache [list,clean] &lt;package&gt;
          li 
            code.language-bash.
              $ bower prune &lt;package&gt;
          li
            code.language-bash.
              $ bower search
          li
            code.language-bash.
              $ bower update  &lt;package&gt;
      section
        h2 It's not the same of npm!
        br
        img(src='images/shock.gif')
      section
        h2 But it's neither the best way
        br
        img(src='images/yesyes.gif')
      section(data-bespoke-backdrop='jspm')
        h2 JSPM
        h3 Frictionless browser package management

      section
        h2 What is JSPM
        br
        ul.bullet
          li It's a package manager for the <i>SystemJS </i>universal module loader
          li Loads any module format such as ES6, AMD, CommonJS from any registry (github, npm, etc.)
          li Uses a flat versioned dependency management tree
          li Its main focus is front-end dependencies

      section
        h2 Basic Commands
        br
        ul.bullet
          li 
            code.language-bash.
              $ jspm init
          li
            code.language-bash.
              $ jspm install [npm:,githhub:]&lt;package&gt;
          li
            code.language-bash.
              $ jspm run &lt;module&gt;
          li
            code.language-bash.
              $ jspm bundle app/main main-bundle.js --inject
        br
        p(style='font-size: 14px;').bullet (<i>For a detailed guide about the jspm CLI refer to the <a href="https://github.com/jspm/jspm-cli">https://github.com/jspm/jspm-cli</a></i>)     
      section
        h2 Why is different from Bower
        br
        ul.bullet
          li Bower has only one purpose-to download source files you need from the web to your hard disk
          li Jspm is not only a module downloader, it manages dependency injection in your app
          li Jspm offers out of the box <i>traceur</i> or <i>babel</i> to run <em>ES6</em>
          li It suppors modules import<br>
            code.language-javascript.
              var $ = require('jquery'); // AMD-style import!! Magic!!
      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 ECMA 6 
      section
        h2 Features Review
      section
        h2 The let Keyword
        br.bullet
        h3.bullet Declares a variable local to the block scope...
        code.bullet.language-javascript.
            var x = 1;
            if(x < 10) {
              let v = 1;
              v = v + 21;
              console.log(v);
            }
            console.log(v); //v is not defined>)
      section
        h2 The const Keyword
        br.bullet
        h3.bullet Declares a "variable" that once is set can't change...
        code.bullet.language-javascript.
          const username = 'Giorgio';
          username = 'Jonathan'; // "username" is read-only
      section
        h2 Template Strings
        br.bullet
        h3.bullet Concatenates strings and variable wrapping variables in a ${} sign...
        code.bullet.language-javascript.
          let name = 'giorgio';
          let email = 'me@webplatform.io';
          console.log(`username ${name} and e-mail ${email}`);
      section
        h2 Arrow functions
        br.bullet
        h3.bullet It's a shorter form of a function that lexically binds the <em>this</em> value...
        code.bullet.language-javascript.
          (param1, param2, paramN) => { statements }
          (param1, param2, paramN) => expression
      section
        h2 Variadic arguments and Default Values
        br.bullet
        h3.bullet Functions can be now defined to explicitly accept a vairable number of arguments and default values...
        code.bullet.language-javascript.
          function printAll(...names){
            for (item of names) {
              console.log(item);
            }
          }
      section
        h2 Destructuring Assignement
        br.bullet
        h3.bullet expression that makes it possible to extract data from arrays or objects using a syntax that mirrors the construction of array and object literals...
        code.bullet.language-javascript.
          var [name, surname, age] = ["Giorgio", "Natili", 40];
          console.log(name, surname, age);
      section  
        h2 Iterators
        br.bullet
        h3.bullet Iterators allow iteration over arbitrary objects...
        pre.bullet
          code.language-javascript.
            function RangeIterator(min, max) {
               this[Symbol.iterator] = function () {
                  var current = min;
                  return {
                    next: function () {
                      return {
                        done: /*some conditions */ true,
                        value: /*the current value */ Math.random()
                      };
                    };
            }
      section
        h2 Generators
        br.bullet
        h3 With ES6 generators we can pause and resume multiple times the execution of a function...
        pre.bullet
          code.language-javascript.
            function *foo(x) {
              var y = 2 * (yield (x + 1));
              var z = yield (y / 3);
              return (x + y + z);
            }
      section
        h2 ES Modules
      section
        h2 What is a Module?
        br
        ul.bullet
          li In software, a module is a part of a program
          li Programs are composed of one or more independently developed modules that are combined together trough events or injection
          li A single module can contain one or several functions
      section
        h2 ES6 Modules
        br
        ul.bullet
          li Each module is defined in its own file
          li The functions or variables defined in a module are not visible outside unless you explicitly export them
          li The <u>export</u> keyword exports the desired functions
          li The <u>default</u> keyword indicates that this is a default export and doesn’t require a name 
      section
        h2 Syntax
        br.bullet 
        code.bullet.language-javascript.
          // Saved in a file math-utils.js
          function sum(num1, num2) {
            return num1 + num2;
          }
          export { sum as add };
        br  
        code.bullet.language-javascript.
          // Using the module
          import {add} from 'math-utils'
      section
        h2 About Import and Export
        br
        ul.bullet
          li A module can export multiple things by prefixing their declarations with the keyword export <br />
            pre
              code.language-javascript.
                export const sqrt = Math.sqrt;
          li The <u>default</u> exported value is the more important and is unique in each module <br />
            pre
              code.language-javascript.
                export default function () { ... };
          li When importing a module you can decide the variable name to use to store the default export <br />
            pre
              code.language-javascript.
                import _ from from 'underscore';
      section
        h2 Import Aliases
        br
        ul.bullet
          li As for the <u>export</u>,imported properties can be aliased (aka <u>as</u>) <br />
            pre
              code.language-javascript.
                import {add as summ} from 'math-utils';
          li Imported values can be then re-exported with an appropriate alias <br />
            pre
              code.language-javascript.
                import { sum } from 'math-utils';
                export { sum as add };
      section
        h2 Using ECMA6 Today
        br
      section
        h2 Traceur
        br.bullet
        h3.bullet Traceur is a JavaScript.next-to-JavaScript-of-today compiler that allows you to use features from the future today...
      section
        h2 Babel
        br.bullet
        h3.bullet It's the new name of <u>6to5</u>, it's a tool that translates the new ES6 (aka ES2015) syntax to a browser compliant JavaScript... 
      section 
        h2 Babel VS Traceur
        br
        ul.bullet
          li Both offer the same ES6 support
          li Transpiling performances are kinda of the same
          li Transpiled code performances are pretty similar
          li Bable transpiled code is more readable
          li Babel supports JSX (aka ReactJS)
      section
        h2 ES6 with JSPM
        br.bullet
        pre.bullet
          code.language-bash.
            $ npm install live-server -g
        pre.bullet
          code.language-bash.
            $ jspm init
        pre.bullet
          code.language-html.
            &lt;script src="jspm_packages/system.js"&gt;&lt;/script&gt;
            &lt;script src="config.js"&gt;&lt;/script&gt;
            &lt;script&gt;
              System.import('scripts/app');
            &lt;/script&gt;
      section
        h2 Live Demo
      section
        h3 Working on Lab 4
      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Web Components
      section(data-bespoke-backdrop='webcomponents')
        h2 Web Components
        h3 A collection of best practices and reusable code...
      section
        h2 In a Nutshell
        br.bullet
        h3.bullet In a nutshell, they allow us to bundle markup and styles into custom HTML elements...
        br
        img.bullet(src='images/webcomponents.png' style='width: 380px; height: 443px;')
      section
        h2 Browser Support
        br.bullet
        img.bullet(src='images/browser-support.png')
      section
        h2 Surprised?
        br.bullet
        img.bullet(src='images/surprised.gif')
      section
        h2 Shadow Dom
        br.bullet
        h3.bullet It's the DOM inside a widget, encapsulated from the rest of the page in order to prevent conflicts...
        ul.bullet
          li It offers CSS encapsulation
          li It doesn't allow the co-existence of different versions of the same library in the same page
      section
        h2 Polymer
        br.bullet
        h3.bullet Polymer is a library built on top of the current web components standards for building custom elements...
        br
        pre.bullet(style='font-size: 14px;')
          code.language-html.
            &lt;dom-module id="hello-world"&gt;
                &lt;template&gt;
                  &lt;p&gt;Hello &lt;strong&gt;{{who}}&lt;/strong&gt; :)&lt;/p&gt;
                &lt;/template&gt;
            &lt;/dom-module&gt;
        pre.bullet(style='font-size: 14px;')
          code.language-javascript.
            Polymer({
                is: 'hello-world',
                  properties: {
                    who: // ....
        iframe.bullet(src='http://webcomponents.org/hello-world-polymer/bower_components/hello-world-polymer/' style='background-color: white;')
      section
        h2 X-Tag
        br.bullet
        h3.bullet It's a JavaScript library created and Maontained by <em>Mozilla</em> that brings Web Components Custom Element to all modern browsers...
        br
        pre.bullet(style='font-size: 18px;')
          code.language-javascript.
            xtag.register('x-accordion', {
              // extend existing elements
                extends: 'div',
                  lifecycle:{
                  created: function(), inserted: function(), removed: function()
        br
        pre.bullet
          code.language-html.
            &lt;hello-world who="Unicorn"&gt;&lt;/hello-world&gt;
      section
        h2 VanillaJS
        br.bullet
        pre.bullet(style='font-size: 14px;')
          code.language-javascript.
            (function() {
                // Creates an object based in the HTML Element prototype
                var element = Object.create(HTMLElement.prototype);
                    
                // Fires when an instance of the element is created
                element.createdCallback = function() {};
                            
                // Fires when an instance was inserted into the document
                element.attachedCallback = function() {};
                                    
                // Fires when an instance was removed from the document
                element.detachedCallback = function() {};
                                            
                // Fires when an attribute was added, removed, or updated
                element.attributeChangedCallback = function(attr, oldVal, newVal) {};
                                                    
                // Registers custom element
                document.registerElement('hello-world', { prototype: element });
              })
      section
        h2 Are you kidding me?
        br.bullet
        img.bullet(src='images/kiddingme.gif')
      section
        h2 Web Components and Generators
        br.bullet
        img.bullet(src='images/yeomanelement.jpg')
        br
        p.bullet Install this <a href="https://github.com/webcomponents/generator-element">https://github.com/webcomponents/generator-element</a> interesting <em>yeoman</em> generator...  
      section
        h3 Working on Lab 5
        h6 Explore the world of custom tasg <a href="https://customelements.io/">https://customelements.io/</a>!
      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Routing
      section
        h2 Application Routing
        br
        ul.bullet
          li Most times in a Single Page App (aka SPA), the appropriate resources are loaded when the URL changes
          li The URL structure is used to specify which views should be rendered/loaded
          li Its through the URL that a SPA understand which data have to be fetched from the server
      section
        h2 Application State
        br.bullet
        h3.bullet The application state is mostly persisted in the client through information fragments used by the server to rebuild tge actual state...
      section
        h2 Don't reinvent the wheel!
        br
        ul.bullet
          li <a href="https://github.com/visionmedia/page.js">PageJS</a>
          li <a href="https://github.com/flatiron/directo">Director</a>
          li <a href="https://github.com/markdalgleish/bespoke-hash">Bespoke-hash</a>
          li <a href="https://lhorie.github.io/mithril/">Mithril</a> <br />
            p(style='font-size:14px') (ok, that's a micro framework it doesn't count!)
      section
        h2 PageJS
        h3 Powered by <a href="https://github.com/markdalgleish/bespoke-scale">bespoke-scale</a>
      section
        h2 Director
        h3.bullet Powered by <a href="https://github.com/markdalgleish/bespoke-bullets">bespoke-bullets</a>
        ul
          li Bullet 1
          li Bullet 2
          li Bullet 3
      section
        h2 Isn't this interesting?
        br
        img(src='images/interesting.gif')
      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Conclusions
      section(data-bespoke-hash='frameworks-are-not-evil')
        br
        h3 Using frameworks is not bad, understadning what's behind the sceene is a key point to get the most value from them...
      section
        br
        h3 Preferring polyfills to frameworks it's possible to remove not needed code once a feature is supported by browsers....
      section
        br
        h3 A technology should be used if it's the right tool to address a prouct needs not because it's our favourite tool...
      section
        h2 That's it
        br
        img(src='images/thanks.gif')
        br
        p Thanks so much!
        p(style='font-size:16px;') @giorgionatili

    script(src='build/build.js')
